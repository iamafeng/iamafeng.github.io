[{"title":"git实战笔记","date":"2019-12-18T09:01:18.000Z","path":"2019/12/18/git实战/","text":"git与svn的区别 git核心命令使用 git底层实现原理剖析 基于git通信协议搭建git私服 基于gogs搭建企业git私服 主讲老师： fox老师 git基础概念git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。git 是 Linus Torvalds为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 git与svn的区别 存储方式不同 使用方式不同 管理模式不同 存储方式不同git把内容按元数据方式存储,类似k/v数据库，而svn是按文件存储 git存储过程演示 123456789101112$ git init foxInitialized empty git repository in D:/git/fox/.git/$ cd fox$ echo 'hello world' &gt;&gt; README.MF$ git hash-object -w README.MFwarning: LF will be replaced by CRLF in README.MF.The file will have its original line endings in your working directory.3b18e512dba79e4c8300dd08aeb37f8e728b8dad$ git cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dadhello world 使用方式不同从本地把文件推送远程服务，svn只需要commint，而git需要 add、commint、push 三个步骤 svn使用过程 git使用过程 管理模式不同git 是一个分布式的版本管理系统，而要svn是一个远程集中式的管理系统 集中式 分布式 git核心命令git 客户端安装官方客户端： https://git-scm.com/downloads 其它客户端：https://tortoisegit.org/download/ 文档： https://www.git-scm.com/docs centos7 安装git 12# yum安装yum install -y git 源码编译安装 1234567891011121314151617181920# 1.安装依赖环境yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker# 2.下载并解压源码$ wget https://github.com/git/git/archive/v2.3.0.zip$ unzip v2.3.0.zip$ cd git-2.3.0#3 编译 安装（如果没有权限就加上sudo）make prefix=/usr/local/git allmake prefix=/usr/local/git install#4、添加环境变量vim /etc/profileexport PATH=/usr/local/git/bin:$PATHsource /etc/profile#如果成功显示版本号表示添加成功git --versiongit version 2.3.0 Git配置 123456789#Git安装完之后，需做最后一步配置。打开git bash，分别执行以下两句命令git config --global user.name \"username\"git config --global user.email \"xxxx@163.com\"#git 自动记住用户和密码操作git config --global credential.helper store#查看配置信息git config -lcat ~/.gitconfig git的基本使用完整模拟从项目添加到push 过程 创建项目 初始化git仓库 提交文件 远程关联 push 至远程仓库 初始化git仓库12345#基于远程仓库克隆至本地$ git clone &lt;remote_url&gt;# 将指定目录初始化为git本地仓库$ git init &lt;directory&gt; 查看仓库状态123456# 查看本地仓库的状态$ git status# 以简短模式查看本地仓库的状态# 会显示两列，第一列是文件的状态，第二列是对应的文件# 文件状态：A 新增，M 修改，D 删除，?? 未添加到git中$ git status -s 文件的状态变化周期 工作目录下的每一个文件都有两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。 本地添加1234567891011#添加指定文件至暂存区$ git add &lt;fileName&gt;# 添加所有修改、已删除的文件到暂存区中$ git add -u &lt;directory&gt;#添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录$ git add -A &lt;directory&gt;# 当需要删除暂存区或分支上的文件，同时工作区不需要这个文件$ git rm &lt;directory&gt;# 当需要删除暂存区或分支上的文件，同时工作区需要这个文件，但是不需要被版本控制$ git rm --cached &lt;file&gt; 本地提交12345# 把暂存区中的文件提交到本地仓库中并添加描述信息$ git commit &lt;file&gt; -m '提交的描述信息'# 把所有修改、已删除的文件提交到本地仓库中# 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"$ git commit -am '提交的描述信息' 远程仓库管理12345678910111213141516# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v#添加远程仓库地址$ git remote add origin http:xxx.xxx#删除指定名称的远程仓库origin$ git remote remove origin #把本地仓库的提交推送到远程仓库#上传新分支至远程$ git push --set-upstream origin master $ git push -u origin master#将本地分支与远程建立关联$ git branch --track --set-upstream-to=origin/test test 分支管理12345678910111213141516171819202122232425262728#查看本地分支，当前所在分支以 \"*\" 标出$ git branch#查看所有分支$ git branch -avv#基于当前分支创建一个新分支$ git branch &lt;branch name&gt;#基于存在的分支创建一个新分支$ git branch &lt;branch name&gt; &lt;exist branch&gt;#基于远程分支创建一个新分支git branch &lt;branch name&gt; origin/master#基于提交创建一个新分支$ git branch &lt;branch name&gt; &lt;commit id&gt;#基于标签创建一个新分支$ git branch &lt;branch name&gt; &lt;tag name&gt;#删除分支$ git branch -d &#123;dev&#125;#切换分支$ git checkout &lt;branch name&gt;#合并分支$ git merge &lt;merge target&gt;#解决冲突，如果因冲突导致自动合并失败，此时 status 为mergeing 状态.#需要手动修改后重新提交（commit） #还原提交记录# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; tag管理12345678910111213141516#查看当前$ git tag#基于分区创建tag$ git tag &lt;tag name&gt; &lt;branch name&gt;# 基于提交创建tag$ git tag &lt;tag name&gt; [&lt;commit ID&gt;]# 可以指定标签信息$ git tag -a &lt;tagname&gt; -m \"...\"# 查看标签信息$ git show &lt;tagname&gt;# 推送一个标签到远程$ git push origin &lt;tagname&gt;# 删除标签$ git tag -d &lt;tagname&gt; 日志管理1234567891011121314151617#查看当前分支下所有提交日志$ git log#查看当前分支下所有提交日志$ git log &#123;branch&#125;# 单行显示日志$ git log &lt;dev&gt; --oneline# 比较两个版本的区别$ git log dev..master#以图表的方式显示提交合并网络$ git log --pretty=format:'%h %s' --graph$ git log --graph --pretty=oneline --abbrev-commit# 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）$ git relog# 回退$ git reset --hard &lt;commit ID&gt; git底层原理 git存储对象 git树对象 git提交对象 git引用 git存储对象git 是一个内容寻址文件系统，其核心部分是一个简单的键值对数据库（key-value data store），你可以向数据库中插入任意内容，它会返回一个用于取回该值的hash 键。 1234567# git 键值库中插入数据$ echo 'hello world version 1.0' | git hash-object -w --stdine4dc2ded6eb80dbbe38375acd0b409c81e98277d#基于键获取指定内容$ git cat-file -p e4dc2ded6eb80dbbe38375acd0b409c81e98277dhello world version 1.0 git基于该功能 把每个文件的版本中内容都保存在数据库中，当要进行版本回滚的时候就通过其中一个键将其取回并替换。 模拟演示git 版本写入与回滚过程 1234567891011121314151617181920212223# 查找所有的git对象$ find .git/objects/ -type f# 写入版本1$ echo 'hello world version 1.0' &gt; README.MF;git hash-object -w README.MFwarning: LF will be replaced by CRLF in README.MF.The file will have its original line endings in your working directory.e4dc2ded6eb80dbbe38375acd0b409c81e98277d# 写入版本2$ echo 'hello world version 2.0' &gt; README.MF;git hash-object -w README.MFwarning: LF will be replaced by CRLF in README.MF.The file will have its original line endings in your working directory.a984c1ed3f9a3eceaf4043c5a3b227954621b5ea# 写入版本3$ echo 'hello world version 3.0' &gt; README.MF;git hash-object -w README.MFwarning: LF will be replaced by CRLF in README.MF.The file will have its original line endings in your working directory.14f5521ac31e82f0b51ba2d278c6ce185e4a7a9a# 回滚指定版本$ git cat-file -p e4dc2ded6eb80dbbe38375acd0b409c81e98277d &gt; README.MF git add 其实就是把修改之后的内容 插入到键值库中。当执行 git add README.MF 等同于执行了 git hash-object -w README.MF 把文件写到数据库中。 git树对象树对象解决了文件名存储的问题，它的目的是将多个文件名组织在一起，其内包含多个文件名称与其对应的Key和其它树对象的引用，可以理解成操作系统当中的文件夹，一个文件夹包含多个文件和多个其它文件夹。 每一个分支当中都关联了一个树对像，他存储了当前分支下所有的文件名及对应的 key. 通过以下命令即可查看 1234567891011121314151617# 查看commit对象$ git cat-file -p 263d8a9463a5be9c8cb6973464fd7408945e20actree 7ca5aba06a1d353f082de003afb6aec2a334bc2aauthor fox &lt;2763800211@qq.com&gt; 1575524733 +0800committer fox &lt;2763800211@qq.com&gt; 1575524733 +0800commit 1#查看对象类型$ git cat-file -t 263d8a9463a5be9c8cb6973464fd7408945e20accommit#查看tree对象$ git cat-file -p master^&#123;tree&#125;100644 blob e4dc2ded6eb80dbbe38375acd0b409c81e98277d README.MF100644 blob f2f901d721b1819be1b9874952245ed6d2523d1d fox.md git提交对象一次提交即为当前版本的一个快照，该快照就是通过提交对象保存，其存储的内容为：一个顶级树对象、上一次提交的对象哈希、提交者用户名及邮箱、提交时间戳、提交评论。 12345678910111213141516171819202122# 查看提交日志$ git log mastercommit c631696a799a04dc04187b01a89854cef285b85e (HEAD -&gt; master)Author: fox &lt;2763800211@qq.com&gt;Date: Thu Dec 5 14:01:21 2019 +0800 2 commitcommit 263d8a9463a5be9c8cb6973464fd7408945e20acAuthor: fox &lt;2763800211@qq.com&gt;Date: Thu Dec 5 13:45:33 2019 +0800 commit 1#查看提交对象信息$ git cat-file -p c631696a799a04dc04187b01a89854cef285b85etree cc0850e551b41927c7aa88e1273bf4cedde9f63eparent 263d8a9463a5be9c8cb6973464fd7408945e20acauthor fox &lt;2763800211@qq.com&gt; 1575525681 +0800committer fox &lt;2763800211@qq.com&gt; 1575525681 +08002 commit 从修改一个文件到提交的过程中会生成三类对象： 一个内容对象 ==&gt; 存储了文件内容 树对象（至少一个） ==&gt; 存储了文件名及内容对象的key 一个提交对象 ==&gt; 存储了树对象的key 及提交评论。 git引用当执行 git branch {branchName} 时创建了一个分支，其本质就是在git 基于指定提交创建了一个引用文件，保存在 .git\\refs\\heads\\ 下。 123456# 创建分支$ git branch dev # 查看分支引用文件$ cat .git\\refs\\heads\\dev# 查看分支差异git diff dev..master git通信协议分布式通信需要有应用协议，应用协议的实现包含编码，解码和远程传输的实现，git支持四种应用协议，分别是Local，http，git，ssh。通过四种协议都可以手动搭建简单的git仓库私服。 Local(本地协议)本地协议可以基于本地文件系统，或者共享（NFS）文件系统进行访问，来实现源码的一个共享，使用Local协议搭建git私服是最轻松的，也是最简单的。 优点：简单，直接使用了现有的文件权限和网络访问权限，小团队小项目建立一个这样的版本管理系统是非常轻松的一件事。 缺点：这种协议缺陷就是本身共享文件系统的局限，只能在局域网，而且速度也慢。 适应场景：小团队，小项目临时搭建版本服务。 演示本地协议使用方式： 123456789# 使用目录 /d/git/local 作为git公共仓库，在仓库中创建一个裸项目# 祼项目一般用做git服务、非裸项目也可做远程服务，二者区别在于祼项目录中文件无法查看和修改。$ git init --bare hello.git# 克隆项目$ git clone /d/git/local/hello.git# 基于file 协议克隆本地项目$ git clone file:///d/git/local/hello.git 如果在 URL 开头明确的指定 file://，那么 git 的行为会略有不同。 如果仅是指定路径，git 会尝试使用硬链接（hard link）或直接复制所需要的文件。 如果指定 file://，git 会触发平时用于网路传输资料的进程，传输过来的是打包好的文件,更节约硬盘空间。 ssh协议在Linux中，ssh协议是我们经常用到的。ssh属于Linux里面的一个通信协议，基于ssh在Linux中搭建私服，访问git仓库是不需要做额外的配置的。只需要基于ssh的用户名密码即可。git 支持利用ssh 协议进行通信，这是绝大部分linux、uninx系统都支持的，所以利用该协议架设git版本服务是非常方便的。 优点：首先ssh 架设相对简单、其次通过 ssh 访问是安全的，另外ssh 协议很高效，在传输前也会尽量压缩数据。 缺点：权限体系不灵活，必须提供操作系统的帐户密码，哪怕是只需要读取版本。 适用场景：团队、小项目、临时项目 演示ssh 协议使用方式: git 服务必须先安装到linux 系统上，然后才能使用ssh协议跟git服务进行通信 12345678910# /data/git下创建一个祼项目git --bare init hello.git# 本地基于远程克隆仓库git clone root@192.168.3.14:/data/git/hello.gitcd hello/# 添加文件echo 'hello world version 1.0' &gt;&gt; README.MF# 本地添加、提交、并推送至远程git add -A; git commit -am 'commit 1'; git push; 免密码登录配置 12345678# 开发机器上生成公钥 ssh-keygen -t rsa #查看公钥内容cat ~/.ssh/id_rsa.pub#拷贝公钥内容到git服务器的用户目录的.ssh下的authorized_keys文件中cd ~/.ssh/vim authorized_keys 可能的错误： git-upload-pack: command not found 原因是 ssh 协议下只能访问/usr/bin 下的目录，解决办法如下 12ln -s /usr/local/git/bin/git-upload-pack /usr/bin/git-upload-packln -s /usr/local/git/bin/git-receive-pack /usr/bin/git-receive-pack http协议git http 协议实现是依懒WEB容器(apache、nginx)及cgi 组件进行通信交互，并利用WEB容器本身权限体系进行授权验证。在git 1.6.6 前只支持http Dumb（哑）协议，该协议只能下载不能提交，通常会配合ssh 协议一起使用，ssh 分配提交帐号，http dumb提供只读帐号。1.6.6 之后git 提供了git-http-backend 的 CGI 用于实现接收远程推送等功能。 优点：解决了local 与ssh权限验证单一的问题、可基于http url 提供匿名服务，从而可以放到公网上去。而local 与ssh 是很难做到这一点,比如实现一个类似github 这样的网站。 缺点：架设复杂一些需要部署 WEB服务器，和https 证书之类的配置 适用场景：大型团队、需要对权限精准控制、需要把服务部署到公网上去 演示http Dumb 配置与使用 123456789101112131415161718192021222324252627282930313233# /data/git下创建一个祼项目git --bare init hello.git# 在仓库中加一个钩子，首先进入目录：cd /data/git/hello.git/hooks# 修改文件，post-update 当有项目修改的时候，就会触发这个钩子# 钩子参考： https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90mv post-update.sample post-udpate#打包，然后生成web端能够访问的静态文件#进入hello.git目录git update-server-info#配置nginx server &#123; listen 80; server_name localhost git.bat.com; location / &#123; root /data/git; &#125; &#125; #C:\\Windows\\System32\\drivers\\etc配置192.168.3.14 git.bat.com # 本地克隆远程服务git clone http://git.bat.com/hello.git # 哑协议只能拉取，无法提交$ git pusherror: Cannot access URL http://git.bat.com/hello.git/, return code 22fatal: git-http-push failederror: failed to push some refs to 'http://git.bat.com/hello.git' 哑协议只能拉取代码，但是http智能协议可以同时实现拉取和推送。 设置 Smart HTTP 一般只需要在服务器上启用一个 git 自带的名为 git-http-backend 的 CGI 脚本。 该 CGI 脚本将会读取由 git fetch 或 git push 命令向 HTTP URL 发送的请求路径和头部信息，来判断该客户端是否支持 HTTP 通信（不低于 1.6.6 版本的客户端支持此特性）。 如果 CGI 发现该客户端支持智能（Smart）模式，它将会以智能模式与它进行通信，否则它将会回落到哑（Dumb）模式下（因此它可以对某些老的客户端实现向下兼容）。Smart 协议 是基于CGI 配合git git-http-backend 脚本进行使用，配置较复杂，现在一般不会这么去做，而是采用gitlab 、gogs 之类的web管理进行代替 git协议git 协议是包含在 git 里的一个特殊的守护进程，它会监听一个特定的端口（9418），类似于 SSH 服务，但是访问无需任何授权。 优点：目前，git 协议是 git 使用的网络传输协议里最快的。 如果你的项目有很大的访问量，或者你的项目很庞大并且不需要为写进行用户授权，架设 git 守护进程来提供服务是不错的选择。 它使用与 SSH 相同的数据传输机制，但是省去了加密和授权的开销。 缺点：git 协议缺点是缺乏授权机制。 而且9418是一个非标准端口，一般防火墙不会开放 演示git协议的使用： 123456789101112yum install -y git-daemon# 启动守护进程 ,配置git协议nohup git daemon --reuseaddr --base-path=/data/git/ /data/git/ &amp;# /data/git下创建一个祼项目git --bare init hello3.gitcd hello3.git/# 创建一个空文件，表示开放该项目，允许非授权访问touch git-daemon-export-ok#本地克隆远程项目git clone git://192.168.3.14:9418/hello3.git git私服搭建基于gogs快速搭建企业私有git服务 gogs 介绍安装Gogs 是一款开源的轻量级git web服务，其特点是简单易用完档齐全、国际化做的相当不错。其主要功能如下: 提供Http 与ssh 两种协议访问源码服务 提供WEB界面可查看修改源码代码 提供较完善的权限管理功能、其中包括组织、团队、个人等仓库权限 提供简单的项目wiki功能 提供工单管理与里程碑管理。 下载安装 官网：https://gogs.io 下载：https://gogs.io/docs/installation 选择Linux amd64 下载安装 文档：https://gogs.io/docs/installation/install_from_binary 123wget https://dl.gogs.io/0.11.91/gogs_0.11.91_linux_amd64.tar.gz#后台运行nohup ./gogs web &amp; 默认端口：3000,初次访问http://:3000 会进到初始化页,进行引导配置。 gogs基础配置配置手册 https://gogs.io/docs/advanced/configuration_cheat_sheet gogs 定时备份与恢复备份与恢复123456789101112#查看备份相关参数./gogs backup -h#默认备份,备份在当前目录./gogs backup #参数化备份 --target 输出目录 --database-only 只备份db ./gogs backup --target=./backups --database-only --exclude-repos#恢复。执行该命令前要先删除 custom.bak./gogs restore --from=gogs-backup-20191208192026.zip./gogs restore --database-only --from=./backups/gogs-backup-20191208221323.zip --config custom/conf/app.ini 自动备份脚本backup.sh内容如下： 1234567891011121314#!/bin/sh -egogs_home=\"/usr/local/soft/gogs/\"backup_dir=\"$gogs_home/backups\"cd `dirname $0`# 执行备份命令./gogs backup --target=$backup_direcho 'backup sucess'day=7#查找并删除 7天前的备份 find $backup_dir -name '*.zip' -mtime +7 -type f |xargs rm -f;echo 'delete expire back data!' 添加定时任务 每天2:00执行备份 1234567891011121314#列出当前用户的crontabcrontab ‐l# 打开任务编辑器crontab -e# 输入如下命令 00 02 * * * 每天凌晨2点执行 backup.sh 并输出日志至 backup.log#分 时 日 月 星期 command00 04 * * * /usr/local/soft/gogs/backup.sh &gt;&gt; /usr/local/soft/gogs/backup.log 2&gt;&amp;1# 重启crontabsystemctl restart crond.service#查看状态systemctl status crond.service","tags":[{"name":"GIT","slug":"GIT","permalink":"https://qiniu.afenghu.com/tags/GIT/"}]},{"title":"1.入门篇：安装使用Mysql及版本区别(5.6 5.7)-Mysql DBA修炼之路","date":"2019-04-02T07:26:05.000Z","path":"2019/04/02/1-入门篇：安装使用Mysql及版本区别-5-6-5-7-Mysql-DBA修炼之路/","text":"回顾各位朋友好,很高兴又和大家见面,经过上一章的学习,我们简单的认识了一下Mysql,学习了Mysql的发展历程,Mysql的分支公司,Mysql的优势所在及简单解剖了Mysql的组成部分。按照上章节安装完成所需环境之后(如果是初学Linux的同学在安装操作系统上有什么疑问可以直接将问题发送至我的邮箱，联系小助手微信：cto51boke 获取),在本章就开始在我们的环境上进行实际搭建,此次搭建参考以下几个版本,并在其中介绍5.6与5.7的区别所在,应之前朋友们的要求,此处将8.0的安装也一并进行演示安装 img Mysql5.6.34(Mysql稳定版本)Mysql5.7.20(Mysql稳定版本)Mysql8.0.15(官方最新GA版本) 安装介绍之前我们说过Mysql很轻量,那么Mysql的安装就一定很简单吗? 答:是的,很简单,但是死板的安装大家上网上找篇文章谁都能搭建出来,无非就是时间长短问题罢了,所以考虑到以后大家在生产环境上安装,我们直接就将需要考虑到的准备工作做全,在安装Mysql之前我们也需要对自己的环境进行优化之后再进行安装,这样就像一个出生的婴儿,他可以在一个温暖家庭出生及生长,费话不多说,先看一下我的基础环境(三个版本我是分三个虚机安装,条件有限的朋友可以尝试重复安装) 机器1:网络：桥接OS：CentOS7.4CPU：4核内存：8G磁盘：100G 机器2:网络：桥接OS：CentOS7.4CPU：4核内存：8G磁盘：100G 机器3:网络：桥接OS：CentOS7.4CPU：4核内存：8G磁盘：100G 环境准备5.6、5.7、8.0的环境准备均是一样的1.网络环境：因为我们目前是学习使用，所以可以将服务器的防火墙、selinux进行关闭，避免影响到我们学习时一些通讯问题，文件权限写入问题等等，一般生产上selinux也是不开的，防火墙也是在硬件上进行维护，所以大家关闭即可，关闭方式如下： CentOS7：防火墙临时关闭：systemctl stop firewalld关闭防火墙开机自启：systemctl disable firewalldselinux临时关闭：setenforce 0selinux永久关闭：sed -i &#39;s/SELINUX=.*/SELINUX=disabled/g&#39; /etc/sysconfig/selinux CentOS6：防火墙临时关闭：service iptables stop关闭防火墙开机自启：chkconfig iptables offselinux临时关闭：setenforce 0selinux永久关闭：sed -i &#39;s/SELINUX=.*/SELINUX=disabled/g&#39; /etc/sysconfig/selinux建议大家将四部分全部执行操作，不然服务可能还是处于开启状态，如selinux 修改了配置文件并不会立即生效Selinux简单带一下：防火墙的作用大家都清楚，是对外保护的服务，Selinux通俗的说其主要保护的是对Linux文件写入、修改、删除进行保护的，其有一套特定的规则可以进行配置，有兴趣了解的朋友可以研究一下，现在生产上用的很少，所以也不用当作重点2.CPU IO调度模型：IO调度模式对数据库也至关重要，Mysql是通过CPU进行IO调度去磁盘获取数据，但IO调度也有适应的不同场景，比如SAS磁盘和固态盘的不同选择，让我们一起看下， 查看当前IO调度模式：[]内为默认123[root@localhost /data/server]# cat /sys/block/sda/queue/schedulernoop [deadline] cfq[root@localhost /data/server]# 1）cfg模式为比较通用的算法,保证所有任务尽量公平此模式会给进程任务分配一个请求队列与时间片在此时间片内由进程向设备文件进行请求，时间片消耗完后被挂起等待调度2）deadline模式是在cfg的基础上，确保了在一个截止时间内服务请求,这个截止时间是可调整的而默认读期限短于写期限.这样就防止了写操作因为不能被读取而饿死的现象deadline是数据库服务器IO模型的最好选择 优先处于读请求 比较适合于SAS似机械磁盘3）noop模式只有一个队列，每当有新的请求进来会将其与最近请求进行合并设备文件此模式优先写而饿死读操作，与deadline相点相反的意思此模式如果是机械磁盘极度不建议使用，如果是固态磁盘则可以尝试 修改当前IO调度模式：Centos7：grubby --update-kernel=ALL --args=&quot;elevator=deadline&quot;Centos6：vi /etc/grub.conf 尾行添加 elevator=deadlineecho deadline &gt; /sys/block/sda/queue/scheduler3.SWAP使用力度：SWAP是一个对操作系统内存的保护机制，是磁盘上文件到内存的映射，在内存不足或内存任务不活跃时操作系统会将这些任务唤出到SWAP中，以防止系统负载过高，导致操作系统直接挂起，操作系统就是你的大脑，大脑烧掉了，身上的零件就都没啥用了，但过多使用SWAP就会降低数据库的性能，因为其本身并不是内存，所以我们取一个权衡值，既保障有SWAP使用，但尽量不使用（如果你的公司不差钱,机器的性能都特别高，那可以直接将swap设置为0，主库如果down机直接进行切换从库，性能至上） 查看当前分配比例：123[root@localhost /data/server]# cat /proc/sys/vm/swappiness30[root@localhost /data/server]# 修改使用优先级比例：当前修改：echo 10 &gt; /proc/sys/vm/swappiness开机调用：echo -e “echo 10 &gt; /proc/sys/vm/swappiness” &gt;&gt; /etc/rc.d/rc.local4.文件系统：CentOS6的默认文件系统为ex4，7的默认为XFS，进行数据库业务选择时我们建议使用XFS，后续学到Mysql索引时会了解到Mysql是B+TREE的结构，而XFS也是这种存储方式，与Mysql结合更好，并且此文件系统类型更稳定 CentOS6格式化XFS需要操作如下：1.yum install -y xfsprogs xfsdump2.将文件系统格式化为xfs格式5.系统参数：Mysql本身就是为应用提供服务的，所以生产上会有大量的连接到Mysql上，并且并发进行文件数据读取，而Linux本身为了防止并发进程过多导致系统崩溃，对进行参数进行了限制，我们直接进行修改即可 查看：ulimit -a1.打开文件的句柄数：open files（防止too many open files错误）2.针对用户数量限制：max user processes （防止单机多实例,连接数过多拒绝新连接） 修改：echo -e “ soft nproc 65535\\n hard nproc 65535\\n soft nofile 65535\\n hard nofile 65535\\n” &gt;&gt; /etc/security/limits.conf 生效：退出当前终端重新登陆ulimit –a查看两项参数是否已变更为65535以上我们就完成了基础环境准备，下面就一起开始进行Mysql安装 Mysql5.6安装一、环境准备：1.目录创建：12mkdir -p /data/&#123;software,mysql&#125;mkdir -p /data/mysql/&#123;data,log,tmp&#125; 2.用户创建：useradd mysql 3.安装依赖包：yum install perl perl-devel perl-Data-Dumper libaio-devel -y 二、安装：1.下载包文件：cd /data/software/wget https://cdn.mysql.com/archives/mysql-5.6/mysql-5.6.34-linux-glibc2.5-x86_64.tar.gztar -zxvf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gzmv mysql-5.6.34-linux-glibc2.5-x86_64 /usr/local/mysql 2.权限赋值：chown -R mysql:mysql /usr/local/mysql /data/mysql/* 三、配置文件： vi /etc/my.cnf大家也可以在群里找我要文件发送给大家(后续我们一一讲解参数的意义)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119[client]port = 3306socket = /data/mysql/tmp/mysql.sock[mysql]prompt=\"\\u@db \\R:\\m:\\s [\\d]&gt; \"no-auto-rehash[mysqld]user = mysqlport = 3306basedir = /usr/local/mysqldatadir = /data/mysql/datasocket = /data/mysql/tmp/mysql.sockpid-file = /data/mysql/tmp/mysql.pidcharacter-set-server=utf8collation-server = utf8_general_ci#skip-character-set-client-handshake=true#init_connect='insert into auditlog.accesslog(ConnectionID,ConnUserName,PrivMatchName,LoginTime) values(connection_id(),user(),current_user(),now());'skip_name_resolve=1event_scheduler = onsql_mode='NO_UNSIGNED_SUBTRACTION,NO_ENGINE_SUBSTITUTION'open_files_limit = 65535innodb_open_files = 65535back_log=1024max_connections = 512max_connect_errors=1000000interactive_timeout=300wait_timeout=300max_allowed_packet = 1024Mtable_open_cache=2048table_definition_cache=2048table_open_cache_instances = 32thread_cache_size = 128thread_stack = 512Kexternal-locking = FALSEmax_tmp_tables=200tmp_table_size=100Mmax_heap_table_size=100Gexplicit_defaults_for_timestamp = 1lock_wait_timeout = 3600auto_increment_increment = 1auto_increment_offset = 1autocommit = ONsecure_file_priv=''read_only = OFFlower_case_table_names=1innodb_fast_shutdown = 0innodb_force_recovery=0innodb_buffer_pool_dump_at_shutdown = 1innodb_buffer_pool_load_at_startup = 1log-error=/data/mysql/log/error.logslow_query_log=ONslow_query_log_file=/data/mysql/log/slow_mysql.loglong_query_time=2innodb_flush_log_at_trx_commit=1innodb_log_file_size =1Ginnodb_log_files_in_group=3innodb_log_group_home_dir=./sync_binlog = 1binlog_cache_size = 16Mmax_binlog_cache_size = 1Gmax_binlog_size=1Gexpire_logs_days = 30default-storage-engine = INNODB#internal_tmp_disk_storage_engine = INNODBtransaction_isolation=REPEATABLE-READinnodb_max_dirty_pages_pct = 50innodb_adaptive_flushing = ONinnodb_flush_method = O_DIRECTsort_buffer_size=8Mjoin_buffer_size=8Mquery_cache_size=0query_cache_type=0read_buffer_size = 8Moptimizer_switch=\"index_condition_pushdown=on,mrr=on,mrr_cost_based=on,batched_key_access=off,block_nested_loop=on\"read_rnd_buffer_size = 8Minnodb_old_blocks_pct=35#innodb_additional_mem_pool_size= 128Minnodb_buffer_pool_size= 1Ginnodb_buffer_pool_instances = 16innodb_log_buffer_size =32Mbulk_insert_buffer_size=128Minnodb_change_buffer_max_size = 50innodb_doublewrite=oninnodb_adaptive_hash_index = oninnodb_file_per_table =1innodb_data_file_path = ibdata1:1024M:autoextendinnodb_page_size = 16k#innodb_checksum_algorithm =crc32innodb_lock_wait_timeout = 35innodb_rollback_on_timeout = oninnodb_sync_spin_loops = 100innodb_spin_wait_delay = 30innodb_lru_scan_depth = 4000innodb_thread_concurrency = 0innodb_write_io_threads = 2innodb_read_io_threads = 2innodb_purge_threads = 2innodb_io_capacity = 800innodb_io_capacity_max = 1600server-id = 3306110log-bin= /data/mysql/log/binlog-mysqlbinlog_format=row 四、初始化Mysql1.查看初始化使用帮助：/usr/local/mysql/scripts/mysql_install_db –help 2.初始化当前Mysql：/usr/local/mysql/scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/data/mysql/data –defaults-file=/etc/my.cnf –user=mysql 3.初始化完成后会提示你修改密码：/usr/local/mysql/bin/mysqladmin -u root password ‘123456’ 4.查看初始化后数据库文件：ls /data/mysql/data/如果包括mysql、information_schema、test目录即可以视为初始化成功 [root@localhost data]# lsib_buffer_pool ibdata1 ib_logfile0 ib_logfile1 ib_logfile2 mysql test undo001 undo002 undo003 5.最后我们启动mysql：/usr/local/mysql/bin/mysqld_safe –defaults-file=/etc/my.cnf &amp;我们看一下图示内容：正常初始化后会出现两个OK的提示，并提示我们使用mysqladmin命令进行密码的初次配置，最后使用mysqld_safe方式启动Mysql，我们在启动时手工指定了配置文件的位置，其实也可以不用指定，但你需要知道Mysql找寻配置文件时的顺序，如下： 123/etc/my.cnf/etc/mysql/my.cnf/usr/local/mysql/etc/my.cnf Mysql5.7安装Mysql5.7的安装与5.6的安装方式基本一致，不同的地方在于初始化部分，我们来看一下不同的地方 5.7初始化Mysql：初始化操作：/usr/local/mysql/bin/mysqld –defaults-file=/etc/my.cnf –basedir=/usr/local/mysql –datadir=/data/mysql/data –user=mysql –initialize 查看随机密码：可以看到我们的初始密码为 “Eiv/Dy!I44t”[root@localhost data]# cat /data/mysql/log/error.log | grep password2019-02-21T10:45:24.067928Z 1 [Note] A temporary password is generated for root@localhost: Eiv/Dy!I44t 5.启动mysql：/usr/local/mysql/bin/mysqld_safe –defaults-file=/etc/my.cnf &amp;5.6与5.7区别总结：此处仅介绍初始化后的不同，更多特性上的不同后续我们进行讲解 Mysql5.6：1.初始化命令为mysql_install_db,初始化之后会由我们自己来进行密码的初次修改2.数据目录下包含mysql information_schema test performache_schema四个数据库 Mysq.5.7：1.初始化命令为mysqld,并多了一个initialize参数初始化之后默认会生成一个随机密码至error.log文件中后续我们使用这个密码进行二次修改这个密码只是Mysql提供给我们初次使用的登陆之后会提示我们密码过期问题所以我们一般在初始化之后直接对密码进行二次修改使用如下命令： /usr/local/mysql/bin/mysqladmin -uroot -p password输入刚刚的随机密码，再输入两次你需要的密码即可 2.数据目录下包含mysql information_schema sys performache_schema四个数据库 5.7初始化参数介绍：initialize参数：当我们添加这个参数时Mysql会默认帮我们生成一个随机密码到error.log文件内 initialize-insecure：如果我们在5.7初始化时指定这个参数，那么此时会和5.6初始化后结果相同，不会为我们生成随机密码由用户进行第一次的密码配置 Mysql8.0安装一、环境准备：1.目录创建：12mkdir -p /data/&#123;software,mysql&#125;mkdir -p /data/mysql/&#123;data,log,tmp&#125; 2.用户创建：useradd mysql 3.安装依赖包：yum install perl perl-devel perl-Data-Dumper libaio-devel -y 二、安装：1.下载包文件：12345cd /data/software/wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.15-linux-glibc2.12-x86_64.tar.xzxz -d mysql-8.0.15-linux-glibc2.12-x86_64.tar.xztar -xvf mysql-8.0.15-linux-glibc2.12-x86_64.tarmv mysql-8.0.15-linux-glibc2.12-x86_64 /usr/local/mysql 2.权限赋值：chown -R mysql:mysql /usr/local/mysql /data/mysql/* 三、配置文件： vi /etc/my.cnf大家可以继续使用上面的配置文件内容但需要将部分参数进行删减，因为有部分特性至Mysql8.0已经彻底废弃了，如下：123max_tmp_tables=200query_cache_size=0query_cache_type=0 后续讲解8.0新特性时我们会添加一些新的配置参数 四、初始化/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql/data --user=mysql --initialize 查看初始化后数据库文件：ls /data/mysql/data/ 包括1234[root@localhost data]# lsauto.cnf ca.pem client-key.pem ibdata1 ib_logfile1 ibtmp1 mysql performance_schema public_key.pem server-key.pem undo_001ca-key.pem client-cert.pem ib_buffer_pool ib_logfile0 ib_logfile2 #innodb_temp mysql.ibd private_key.pem server-cert.pem sys undo_002[root@localhost data]# 五、最后我们启动mysql：/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf &amp;六、登入Mysql：[root@localhost log]# /usr/local/mysql/bin/mysql -uroot -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 9Server version: 8.0.15 MySQL Community Server - GPL Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners. Type ‘help;’ or ‘\\h’ for help. Type ‘\\c’ to clear the current input statement. root@db 10:36: [(none)]&gt; Mysql密码重置至此，Mysql的安装我们学习完成了，那安装完成之后如果我们不小心把error.log文件搞丢了那就查看不到password信息了，或者二次进行修改密码时输入问题导致密码登陆不上了，那应该怎么办，此时我们也可以使用如下的方式进行密码重置，操作很简单，思路是将Mysql的密码权限表跳过，直接可以不用家门钥匙就能进到家门里面了，而且可以为所欲为，这时我们就可以去家里找到我们的钥匙，或者把钥匙和锁都换一把，我们来实际操作一下注:生产中可能我们不会进行此操作,密码都会由DBA或DBA经理进行严格保管,基本没有丢失情况发生,并且一般业务都是禁止停库操作的，但万事也不能保证100% 如果在维护中不够规范导致密码丢失时,可以选择性进行密码重置 关闭Mysql：killall mysqld 或 ps aux | grep mysql | grep -v grep |awk &#39;{print $2}&#39; |xargs kill -9 （不建议使用此类方式停止Mysql，但目前为非常情况因为没有Mysql密码,所以不能使用mysqladmin shutdown的正常关库方式关闭Mysql） 使用跳过密码权限表的方式启动Mysql：/usr/local/mysql/bin/mysqld_safe –defaults-file=/etc/my.cnf –skip-grant-tables &amp;参数：--skip-grant-tables是跳过了mysql.user表的权限验证信息，让我们可以直接进入Mysql进行数据库操作 登陆：mysql （敲mysql命令就直接可以登入了） 查看用户：select user,host from mysql.user;(查看一下我们需要修改的用户信息) 修改密码：(Mysql的权限我们后续会再次进行讲解,先了解一下是由用户%主机+密码方式验证的)update mysql.user set authentication_string=PASSWORD(&#39;new-password&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;; 注意：此处我们使用的版本是5.7,以前版本使用如下命令，5.7之后密码的存储字段发生了变化：update mysql.user set password=PASSWORD(&#39;new-password&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;; 刷新权限：flush privileges;(Mysql修改user表后不会立即生效,需要执行此命令进行权限的刷新) 重启Mysql：1.关闭Mysql：killall mysqld 或 ps aux | grep mysql | grep -v grep |awk &#39;{print $2}&#39; |xargs kill -9 2.启动Mysql：/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf &amp; 小结在本章中我们学习了Mysql5.6、Mysql5.7、Mysql8.0每个版本的安装过程，并介绍了在安装Mysql之前我们应该先对操作系统进行优化的知识点，同时若在工作中或练习中忘记了root的密码应该怎么进行处理，建议大家在练习时一定要进行反复练习，并且在前期学习最好是手敲方式练习，不要复制粘贴，这样效率虽然高，但是我们现在是学习阶段，不要追求快，多敲几遍这样才记得牢固，包括后面一些知识点学习中遇到问题可以有一个处理思路，Mysql的安装其实很简单，一共就分为5部分，很多的应用服务也基本都可以总结为这5部分：环境准备、安装、配置、初始化、启动，在安装过程中如果遇到问题先去检查一下自己的操作是否是按照老师的操作过程来的，然后再去检查一下自己的环境是不是有问题，多去思考动脑，在下章中我们就开始学习Mysql.user这张表，以及其他一些针对权限方面的控制，权限控制在生产环境中是必然的，如果控制不好用户及开发人员的权限，那出了问题就是你DBA的问题，同时会介绍一些8.0中带入的新特性，我们下章再会！","tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://qiniu.afenghu.com/tags/Mysql/"},{"name":"DBA","slug":"DBA","permalink":"https://qiniu.afenghu.com/tags/DBA/"}]},{"title":"序：Mysql前世今生及优势所在(介绍)-Mysql DBA修炼之路","date":"2019-04-02T07:02:49.000Z","path":"2019/04/02/序：Mysql前世今生及优势所在-介绍-Mysql-DBA修炼之路/","text":"学习目标：此次专栏主要针对想系统性学习Mysql的人员量身打造，跟随老师学习完全部章节后至少可以完成Mysql初中级任务。其中包涵了老师在生产环境中遇到的各种故障问题，分析问题思路，解决问题方法，总结问题流程，整体学习由浅入深，由片到面。每章节学习完成后请一定要按照老师的操作流程在自己的环境过一遍，只看是没有用的，如果看一遍就能学会，那我买上100本书躺家里看就行了，要什么电脑，一个字就是懒！所以只要你打算学习，一定要提起你的精神，在初级阶段遇到什么问题了可以先看看自己是否哪个地方操作不当或操作顺序有问题，或者可以发到咱们的交流群里，老师 看到会第一时间响应朋友们，如果到了中级阶段遇到问题一定要先思考，一定要反问自己，不然到了高级阶段你的学习方式会影响你解决问题的效率，而且在学习阶段一定不要做伸手党！最后祝各位朋友们工作如意，事业高升，薪资大涨。下面为一个本次专栏的学习路线，可以参考一下 img 环境准备CPU：不低于2核内存：不低于4G磁盘：不低于50G操作系统：CentOSCentOS7.4下载地址: http://vault.centos.org/7.4.1708/isos/x86_64/ Mysql背景介绍：接触过数据库或一直从事数据库的朋友们都知道当今最流行的两大数据库：1.Oracle 2.Mysql（已被Oracle收购）Oracle数据库虽为数据库界的无冕之王，一直保持 着数据库老大的位置，但其始终还是商业数据库，我们不做过多讲解，主要还是来聊聊Mysql，随着互联网企业的兴起及。 如：阿里巴巴 网易 Yahoo Facebook等大型互联网公司的推动，目前Mysql已经成为世界上最流行的数据库，并一步步开始占领了原有商业数据库的市场，目前Mysql已经成为互联网公司甚至部分传统公司的首选数据库，在我工作这些时间很少听说有互联网公司还在用Oracle的，近几年更是有部分大公司已经完成了由原来的核心业务Oracle数据库向Mysql数据库的转移，像很成功的案例：阿里巴巴 我们一起看一下2019年2月数据库的整体流行程序排名，可以看到Mysql直逼Oracle(只排名为流行度，并非使用率) img Mysql发展史：最初为AB公司的产品，Mysql5.0及之前的版本均由AB公司管理，在2008年的时候AB公司被Sun公司收购，Mysql也就归属到了Sun公司下，但在Sun还没待舒服呢，Sun公司就被Oracle公司收购了，此期间诞生了一个Sun向Oracle的过渡版本：Mysql5.5(5.1-5.5之间没有发布过版本)，直至5.6Mysql就彻底归属于Oracle公司旗下了，从Oracle收购Mysql以来，Mysql发展的速度及新的功能越来越强大，逐步向Oracle靠拢，如：表空间、redo、undo分离、隐藏索引，至2019年，Mysql8.0.15已经GA(官方发布稳定版本)，可以看到在Oracle公司下的Mysql还是生长生育的比较好的，也祝贺Mysql找到了自己的最好的归宿，整体发展过程如下(AB版本不做加入)：5.1 → 5.5 → 5.6 → 5.7 → 8.0 Mysql分支介绍：大家经过前面的了解知道Mysql是一个开源数据库，有开源那么就会出现分支(二次开发)，Mysql有两家很牛X的分支公司percona、mariadb，虽然两家做的很优秀，但目前主流使用的版本仍为Oracle的Mysql(社区版)，主要由Mysql社区进行维护,主要的Mysql版本如下： Mysql(社区版)开源Mysql(商业版)收费perconamariadb再简单的对两家公司做下介绍,为什么说这两家比较牛X呢 Percona公司官网: http://www.percona.com/Percona公司的产品为percona(基于innodb引擎提升自身性能及管理性 默认存储引擎xtraDB),虽然与Mysql名称不同,但是完全兼容Mysqlpercona公司开发了一套Mysql的管理利器percona-toolkit(Mysql瑞士×××,所有的Mysql命令,性能优化,分析,备份等工具)支持增量备份的percona-Xtrabackup(主流备份工具,实现裸文件热备份,增加备份恢复)Mysql集群percona-xtraDB-cluster(PXC,解决主从延迟问题,达到近乎时时同步)并且percona公司收购了tokudb存储引擎,该引擎支持压缩,可达1:5压缩比 Mariadb公司官网: https://mariadb.com/Mariadb的公司老大Monty是原AB公司的老大,也就是说Mysql这玩意最初是出生于Monty的肚子,其功能的发展要迅于Mysql,很早实现了多源复制,支持水平分片的功能 学习Mysql的优点1.大家都知道现在Oracle的薪资已经大不如前,初级岗位基本已经饱和,而MysqlDBA的薪资却一直保持在一个很高的水平,具体大家可以去招聘网搜索2.去IOE的推进,腾讯、阿里、网易、新浪等大型互联网均在使用Mysql，并且小型互联网公司也基本全部在使用Mysql，一些传统企业也在进行由Oracle向Mysql的转型3.Mysql是一个开源的数据库，如果你懂C，你有问题或者原理不懂的地方，可以直接去扒代码，并且Mysql社区很活跃 交流讨论很方便4.轻量级数据库，Mysql有很好的扩展性，结合NOSQL，主从复制扩展，安装简易5.强大的复制级别，Mysql现在支持多种复制级别，可以根据业务需求进行灵活选择Mysql的下载Mysql下载地址：https://downloads.mysql.com/archives/community/img 此次主要针对于Mysql5.7.20、CentOS7.4(6版本也可以,有不同之处我会标注)进行讲解，没有环境的同学请先安装好自己的操作系统,进入Mysql下载页选择5.7.20，Linux - Generic即可(兼容Linux平台)，大家也可以尝试下载其他版本，像后续我们安装会讲解5.6与5.7的区别，可以下载5.6.2几GA的版本，在自己的生产系统选择时：发布6个月以上的GA版本，前后几个月没有大BUG修复版本 Mysql数据库组成Mysql是由实例与数据库组成(与Oracle相似,不同的是Mysql有强大的存储引擎)Mysql实例：内存数据、进程任务Mysql数据库：参数文件、数据文件、日志文件 小结今天我们了解了Mysql的发展史、版本、分支、Mysql的优势、Mysql的组成，每天我们都会形成一张脑图总结本章学习的主要知识点部分，大家最好也根据自己的收获去总结一下自己的脑图， 最终形成一套Mysql整体的学习知识点脑图，以后方便我们查阅知识点，对Mysql有架构型认知。如果还有其他有关Mysql介绍的信息大家也可以问我，也可以度娘去找一些相关资料，由于发展史部分只是了解，不做过多介绍，我们把重点还是留在后面的知识点上去。下一章我们开始进行Mysql的安装及安装后的一些小问题介绍，关于环境部分大家可以使用vmware的虚拟机，也可以用oracle的虚拟机都可以，操作系统安装CentOS，在进行下一章学习前一定要先自己的环境准备好，下章我们再会！ img","tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://qiniu.afenghu.com/tags/Mysql/"},{"name":"DBA","slug":"DBA","permalink":"https://qiniu.afenghu.com/tags/DBA/"}]},{"title":"Hello World","date":"2019-03-28T00:22:18.000Z","path":"2019/03/28/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://qiniu.afenghu.com/tags/HEXO/"}]}]